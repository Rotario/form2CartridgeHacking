/*
*    Example-Code that emulates a DS2431 1024 bits EEPROM
*
*   Tested with
*    - DS9490R-Master, atmega328@16MHz and teensy3.2@96MHz as Slave
*    - tested on buspirate and two different real 1-wire masters (DS9490 and a PIC18-Device)
*/

#include "OneWireHub.h"
#include "DS2431.h"

constexpr uint8_t pin_onewire   { 2 };

auto hub = OneWireHub(pin_onewire);
auto ds2431 = DS2431( 0x2D,0xFF,0x8F,0x65,0x2B,0x0,0x0); //full
//auto ds2431 = DS2431(0x2D,0xF3,0xA5,0xDF,0x2A,0x0,0x0); //empty
void setup()
{
  pinMode(3, OUTPUT);
    //Serial.begin(115200);
    //while (!Serial);
    //Serial.println("OneWirgede-Hub DS2431");
  
    // Setup OneWire
    hub.attach(ds2431);

    // Test-Cases: the following code is just to show basic functions, can be removed any time
    //Serial.println("Test Write Text Data to page 0");
    constexpr char dFull[] = {
0x43,0x0,0xEB,0xF,0x62,0x41,0x7C,0x7,
0x92,0x89,0x59,0xE2,0x1,0xE0,0x53,0x2F,
0xEF,0xE2,0x47,0x74,0x4D,0x7E,0x7E,0x67,
0x48,0x1A,0xAE,0xDC,0x8A,0x6F,0xEF,0x3D,
0x60,0x2A,0xA2,0x91,0x69,0x48,0x4A,0xB3,
0xA7,0x48,0x98,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x1,0xB4,0xA,0x72,0xE1,0xF2,0x84,0x1B, //Unused
0x91,0xD2,0xB4,0x5C,0x1,0x0,0x8,0x0,
//0x1,0xB4,0xA,0x1F,0xCD,0xF2,0x84,0x1B, //Used
//0x46,0xD7,0x67,0x5B,0x50,0x2,0x55,0xA,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

  constexpr char dEmpty[] = {
0x43,0x0,0x38,0x82,0x86,0xDA,0x62,0x7,
0x52,0x86,0x4A,0x78,0x2A,0x6C,0xF8,0x52,
0xDB,0x99,0x5D,0xEE,0x8D,0x5A,0x91,0x94,
0x4B,0xB0,0x3E,0xF7,0x9E,0x6B,0x71,0xF7,
0x7C,0x69,0xEB,0xB,0xC5,0x19,0xB0,0xEE,
0xF6,0xAD,0x23,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x1,0xDA,0xF2,0x76,0x82,0xDC,0xC1,0xDB,
0xAF,0x2C,0x72,0xF,0x22,0x2,0xED,0xA,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};
    
    
    
    ds2431.writeMemory(reinterpret_cast<const uint8_t *>(dFull),sizeof(dFull),0x00);
    //ds2431.setPageProtection(1*32);
    //Serial.print("Test Read binary Data to page 1: 0x");
    uint8_t mem_read[128];
    ds2431.readMemory(mem_read, sizeof(mem_read), 0); // begin one byte earlier than page 1
    //Serial.println("Header: ");
    //printLargeBuffer(mem_read, sizeof(mem_read));

    // ds2431.clearMemory(); // begin fresh after doing some work

    //Serial.println("config done");
}

void loop()
{
    // following function must be called periodically
    
    hub.poll();
    //hub.printError();
} 

void printBuffer(const uint8_t *buf, uint8_t len)
{
  for (int i = 0; i < len-1; i++)
  {
    Serial.print(buf[i], HEX);
    Serial.print(",");
  }
  Serial.println(buf[len-1], HEX);
}

void printLargeBuffer(const uint8_t *buf, uint16_t len)
{
  uint8_t bytesPerLine = 8;

  for (int i = 0; i < len / bytesPerLine; i++)
  {
    Serial.print(i * bytesPerLine);
    Serial.print("\t\t:");
    printBuffer(buf + i * bytesPerLine, bytesPerLine);
  }
}
